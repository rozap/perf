var _user$project$Main$urlUpdate = F2(
	function (result, model) {
		var _p0 = A2(_elm_lang$core$Debug$log, 'result', result);
		if (_p0.ctor === 'Err') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$navigation$Navigation$modifyUrl(
						_user$project$Router$pageToRoute(model.page))
					]));
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{page: _p0._0}),
				_elm_lang$core$Native_List.fromArray(
					[]));
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			_elm_lang$core$Native_Utils.update(
				model,
				{
					suites: A2(_user$project$Suites$update, _p1._0, model.suites)
				}),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$Main$initialState = {suites: _user$project$Suites$model, page: _user$project$Router$SuitesPage, suite: _elm_lang$core$Maybe$Nothing};
var _user$project$Main$init = function (result) {
	return A2(_user$project$Main$urlUpdate, result, _user$project$Main$initialState);
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {suites: a, suite: b, page: c};
	});
var _user$project$Main$SuitesAction = function (a) {
	return {ctor: 'SuitesAction', _0: a};
};
var _user$project$Main$viewForRoute = function (model) {
	var _p2 = model.page;
	if (_p2.ctor === 'SuitesPage') {
		return A2(
			_elm_lang$html$Html_App$map,
			function (action) {
				return _user$project$Main$SuitesAction(action);
			},
			_user$project$Suites$listView(model.suites));
	} else {
		return A2(
			_elm_lang$html$Html_App$map,
			function (action) {
				return _user$project$Main$SuitesAction(action);
			},
			_user$project$Suites$singleView(model.suite));
	}
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$viewForRoute(model)
			]));
};
var _user$project$Main$main = {
	main: A2(
		_elm_lang$navigation$Navigation$program,
		_elm_lang$navigation$Navigation$makeParser(_user$project$Router$urlParser),
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, urlUpdate: _user$project$Main$urlUpdate, subscriptions: _user$project$Main$subscriptions})
};
